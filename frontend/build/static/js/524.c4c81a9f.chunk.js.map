{"version":3,"file":"static/js/524.c4c81a9f.chunk.js","mappings":"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","sources":["components/TemplateManager.js","components/Toolbar.js","components/RichTextEditor.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { X, Bookmark, Plus, Save, Edit3, ChevronDown, ChevronRight } from 'lucide-react';\nimport RichTextEditor from './RichTextEditor';\n\nconst NODE_TYPE_FIELDS = {\n  topic: [\n    { name: 'title', label: 'Title', type: 'text', placeholder: 'e.g., Major Depressive Disorder' },\n    { name: 'description', label: 'Description', type: 'textarea', placeholder: 'Enter a detailed description...' },\n    { name: 'category', label: 'Category', type: 'text', placeholder: 'e.g., Mood Disorders' },\n  ],\n  case: [\n    { name: 'primary_diagnosis', label: 'Primary Diagnosis', type: 'text', placeholder: 'e.g., Bipolar I Disorder' },\n    { name: 'chiefComplaint', label: 'Chief Complaint', type: 'text', placeholder: 'e.g., \"I feel down all the time.\"' },\n    { name: 'initialPresentation', label: 'Initial Presentation', type: 'textarea', placeholder: 'What symptoms led to intake or referral?' },\n    { name: 'currentPresentation', label: 'Current Presentation', type: 'textarea', placeholder: 'What symptoms or behaviors are prominent now?' },\n    { name: 'medicationHistory', label: 'Medication History', type: 'textarea', placeholder: 'Timeline of trials, responses, and side effects' },\n    { name: 'therapyProgress', label: 'Therapy History & Progress', type: 'textarea', placeholder: 'Interventions, ruptures, breakthroughs' },\n    { name: 'defensePatterns', label: 'Defense Patterns', type: 'text', placeholder: 'e.g., projection, denial, intellectualization' },\n    { name: 'clinicalReflection', label: 'Your Clinical Reflection', type: 'textarea', placeholder: 'What stands out to you? What are you learning?' },\n    { name: 'assessment_plan', label: 'Assessment & Plan', type: 'textarea', placeholder: 'Enter assessment and plan details...' },\n  ],\n  task: [\n    { name: 'title', label: 'Title', type: 'text', placeholder: 'e.g., Prepare presentation on SSRIs' },\n    { name: 'description', label: 'Description', type: 'textarea', placeholder: 'Enter task details...' },\n  ],\n  literature: [\n    { name: 'title', label: 'Title', type: 'text', placeholder: 'e.g., The Neurobiology of...' },\n    { name: 'authors', label: 'Authors', type: 'text', placeholder: 'e.g., Kandel, E. R.' },\n    { name: 'abstract', label: 'Abstract', type: 'textarea', placeholder: 'Paste or write the abstract here...' },\n  ],\n};\n\nconst TemplateManager = ({ isOpen, onClose, onCreate, onUpdate, templates, onDelete }) => {\n  const [isCreating, setIsCreating] = useState(false);\n  const [templateName, setTemplateName] = useState('');\n  const [selectedType, setSelectedType] = useState('topic');\n  const [templateData, setTemplateData] = useState({});\n  const [editingTemplate, setEditingTemplate] = useState(null);\n\n  useEffect(() => {\n    if (editingTemplate) {\n      // Populate form with template data for editing\n      setTemplateName(editingTemplate.name || '');\n      setSelectedType(editingTemplate.nodeType || 'topic');\n      setTemplateData(editingTemplate.data || {});\n      setIsCreating(true);\n    }\n  }, [editingTemplate]);\n\n  // Reset form when node type changes to avoid carrying over old data\n  useEffect(() => {\n    // Only clear data if we are in creation mode (not editing) and the type changes.\n    if (isCreating && !editingTemplate) {\n      setTemplateData({});\n    }\n  }, [selectedType, isCreating, editingTemplate]);\n\n  if (!isOpen) { \n    return null;\n  }\n\n  const nodeTypes = ['topic', 'case', 'task', 'literature'];\n\n  const handleDataChange = (field, value) => {\n    setTemplateData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSaveTemplate = () => {\n    // Basic validation to ensure a name is provided\n    if (!templateName.trim()) {\n      alert('Template name is required.');\n      return;\n    }\n\n    const templatePayload = {\n      id: editingTemplate ? editingTemplate.id : undefined,\n      name: templateName,\n      nodeType: selectedType,\n      data: templateData,\n    };\n\n    if (editingTemplate) {\n      onUpdate(templatePayload);\n    } else {\n      onCreate(templatePayload);\n    }\n\n    // Reset form state and close the creation view\n    setTemplateName('');\n    setSelectedType('topic');\n    setTemplateData({});\n    setIsCreating(false);\n    setEditingTemplate(null);\n  };\n\n  const handleEditTemplate = (template) => {\n    setEditingTemplate(template);\n  };\n\n  const handleStartCreating = () => {\n    setEditingTemplate(null);\n    setTemplateName('');\n    setSelectedType('topic');\n    setTemplateData({});\n    setIsCreating(true);\n  };\n\n  const handleCancelCreation = () => {\n    setIsCreating(false);\n    setEditingTemplate(null); // Clear editing state\n    setTemplateName('');\n    setSelectedType('topic');\n    setTemplateData({});\n  };\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 backdrop-blur-sm\"\n      onClick={onClose}\n    >\n      <div \n        className=\"bg-white rounded-xl shadow-2xl max-w-2xl w-full mx-4 max-h-[70vh] overflow-hidden flex flex-col\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"bg-gray-50 border-b border-gray-200 px-6 py-4 flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold text-gray-800 flex items-center gap-2\">\n            <Bookmark size={20} />\n            {isCreating ? (editingTemplate ? 'Edit Template' : 'Create New Template') : 'Template Manager'}\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 p-1 rounded-full hover:bg-gray-200 transition-colors\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n\n        {/* Content Body */}\n        <div className=\"p-6 overflow-y-auto\">\n          {isCreating ? (\n            <div className=\"space-y-4\">\n              <div>\n                <label htmlFor=\"template-name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Template Name\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"template-name\"\n                  value={templateName}\n                  onChange={(e) => setTemplateName(e.target.value)}\n                  className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"e.g., Initial Psychiatric Evaluation\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"node-type\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Node Type\n                </label>\n                <select\n                  id=\"node-type\"\n                  value={selectedType}\n                  onChange={(e) => setSelectedType(e.target.value)}\n                  className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  {nodeTypes.map((type) => (\n                    <option key={type} value={type}>\n                      {type.charAt(0).toUpperCase() + type.slice(1)}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              {/* Dynamically rendered fields */}\n              {NODE_TYPE_FIELDS[selectedType].map(field => {\n                // Only add collapsible functionality for case node type\n                if (selectedType === 'case') {\n                  // Create a state variable for each field to track collapse state\n                  // Using a component to have isolated state for each field\n                  return (\n                    <CollapsibleField \n                      key={field.name} \n                      field={field} \n                      value={templateData[field.name] || ''} \n                      onChange={(value) => handleDataChange(field.name, value)} \n                    />\n                  );\n                }\n                \n                // For other node types, render normally\n                return (\n                  <div key={field.name}>\n                    <label htmlFor={`template-${field.name}`} className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      {field.label}\n                    </label>\n                    {field.type === 'textarea' ? (\n                      <RichTextEditor\n                        content={templateData[field.name] || ''}\n                        onChange={(value) => handleDataChange(field.name, value)}\n                        placeholder={field.placeholder}\n                        rows={5}\n                      />\n                    ) : (\n                      <input\n                        type={field.type}\n                        id={`template-${field.name}`}\n                        value={templateData[field.name] || ''}\n                        onChange={(e) => handleDataChange(field.name, e.target.value)}\n                        className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder={field.placeholder}\n                      />\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          ) : (\n            <>\n              {templates && templates.length > 0 ? (\n                <ul>\n                  {templates.map((template) => (\n                    <li\n                      key={template.id}\n                      className=\"flex justify-between items-center px-4 py-3 border-b border-gray-200 last:border-b-0 hover:bg-gray-50 transition-colors\"\n                    >\n                      <span className=\"text-gray-700\">{template.name}</span>\n                      <div className=\"flex items-center gap-2\">\n                        <button onClick={() => handleEditTemplate(template)} className=\"text-gray-400 hover:text-blue-600 p-1 rounded-full hover:bg-blue-100 transition-colors\" title={`Edit ${template.name}`}>\n                          <Edit3 size={16} />\n                        </button>\n                        {onDelete && (\n                          <button onClick={() => onDelete(template.id)} className=\"text-gray-400 hover:text-red-600 p-1 rounded-full hover:bg-red-100 transition-colors\" title={`Delete ${template.name}`}>\n                            <X size={16} />\n                          </button>\n                        )}\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <p className=\"text-gray-500\">No templates created yet.</p>\n              )}\n            </>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"bg-gray-50 border-t border-gray-200 px-6 py-4 flex items-center justify-end gap-3 mt-auto\">\n          {isCreating ? (\n            <>\n              <button\n                onClick={handleCancelCreation}\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-800 border border-gray-300 rounded-lg hover:bg-gray-100 transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleSaveTemplate}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2 disabled:bg-blue-300 disabled:cursor-not-allowed\"\n                disabled={!templateName.trim()}\n              >\n                <Save size={16} />\n                {editingTemplate ? 'Update Template' : 'Save Template'}\n              </button>\n            </>\n          ) : (\n            <>\n              <button\n                onClick={onClose}\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-800 border border-gray-300 rounded-lg hover:bg-gray-100 transition-colors\"\n              >\n                Close\n              </button>\n              <button\n                onClick={handleStartCreating}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2\"\n              >\n                <Plus size={16} />\n                Create New\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Collapsible field component for case node type\nconst CollapsibleField = ({ field, value, onChange }) => {\n  // Initialize collapsed state based on whether there's content\n  // If there's content, the section should start expanded\n  const hasContent = value && value.trim().length > 0;\n  const [isCollapsed, setIsCollapsed] = useState(!hasContent);\n  \n  const toggleCollapse = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n  \n  return (\n    <div key={field.name} className=\"border border-gray-200 rounded-lg mb-3 overflow-hidden\">\n      <div \n        className=\"flex items-center justify-between bg-gray-50 px-3 py-2 cursor-pointer\"\n        onClick={toggleCollapse}\n      >\n        <label \n          htmlFor={`template-${field.name}`} \n          className=\"block text-sm font-medium text-gray-700 cursor-pointer select-none\"\n        >\n          {field.label}\n        </label>\n        {isCollapsed ? \n          <ChevronRight size={18} className=\"text-gray-500\" /> : \n          <ChevronDown size={18} className=\"text-gray-500\" />\n        }\n      </div>\n      \n      {!isCollapsed && (\n        <div className=\"p-3\">\n          {field.type === 'textarea' ? (\n            <RichTextEditor\n              content={value}\n              onChange={onChange}\n              placeholder={field.placeholder}\n              rows={5}\n            />\n          ) : (\n            <input\n              type={field.type}\n              id={`template-${field.name}`}\n              value={value}\n              onChange={(e) => onChange(e.target.value)}\n              className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder={field.placeholder}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TemplateManager;","import React from 'react';\nimport { Bold, Italic, List } from 'lucide-react';\n\nconst Toolbar = ({ editor }) => {\n  if (!editor) {\n    return null;\n  }\n\n  const ToolbarButton = ({ onClick, isActive, icon: Icon, title }) => (\n    <button\n      onClick={onClick}\n      className={`p-2 rounded-md border transition-all duration-200 hover:shadow-md ${\n        isActive\n          ? 'bg-blue-600 text-white border-blue-600 shadow-md'\n          : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50 hover:border-gray-400'\n      }`}\n      title={title}\n      type=\"button\"\n    >\n      <Icon size={16} />\n    </button>\n  );\n\n  return (\n    <div className=\"flex items-center gap-2 p-2 bg-gray-50 border border-gray-200 rounded-lg mb-3\">\n      <ToolbarButton\n        onClick={() => editor.chain().focus().toggleBold().run()}\n        isActive={editor.isActive('bold')}\n        icon={Bold}\n        title=\"Bold\"\n      />\n      <ToolbarButton\n        onClick={() => editor.chain().focus().toggleItalic().run()}\n        isActive={editor.isActive('italic')}\n        icon={Italic}\n        title=\"Italic\"\n      />\n      <div className=\"w-px h-6 bg-gray-300 mx-1\" />\n      <ToolbarButton\n        onClick={() => editor.chain().focus().toggleBulletList().run()}\n        isActive={editor.isActive('bulletList')}\n        icon={List}\n        title=\"Bullet List\"\n      />\n    </div>\n  );\n};\n\nexport default Toolbar;","import React, { useEffect, useState } from 'react';\nimport { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Toolbar from './Toolbar';\n\nconst RichTextEditor = ({ content, onChange, placeholder, rows = 3 }) => {\n  const [isInitialized, setIsInitialized] = useState(false);\n  \n  const editor = useEditor({\n    extensions: [StarterKit],\n    content: '',\n    onUpdate: ({ editor }) => {\n      const html = editor.getHTML();\n      onChange(html);\n    },\n    editorProps: {\n      attributes: {\n        class: `w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors prose prose-sm max-w-none`,\n        style: `min-height: ${rows * 1.5}rem;`,\n      },\n    },\n    onCreate: () => {\n      setIsInitialized(true);\n    },\n  });\n\n  // Safely update editor content when content prop changes\n  useEffect(() => {\n    if (editor && isInitialized) {\n      const currentContent = editor.getHTML();\n      const newContent = content || '<p></p>';\n      \n      // Only update if content actually changed and avoid loops\n      if (currentContent !== newContent) {\n        editor.commands.setContent(newContent, false);\n      }\n    }\n  }, [content, editor, isInitialized]);\n\n  if (!editor) {\n    return (\n      <div className=\"w-full p-3 border border-gray-300 rounded-lg bg-gray-50 animate-pulse\" style={{minHeight: `${rows * 1.5}rem`}}>\n        <div className=\"text-gray-400 text-sm\">Loading editor...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"rich-text-editor\">\n      <Toolbar editor={editor} />\n      <EditorContent\n        editor={editor}\n        className=\"min-h-0\"\n        placeholder={placeholder}\n      />\n    </div>\n  );\n};\n\nexport default RichTextEditor;"],"names":["NODE_TYPE_FIELDS","topic","name","label","type","placeholder","case","task","literature","CollapsibleField","_ref2","field","value","onChange","hasContent","trim","length","isCollapsed","setIsCollapsed","useState","_jsxs","className","children","onClick","toggleCollapse","_jsx","htmlFor","ChevronRight","size","ChevronDown","RichTextEditor","content","rows","id","e","target","_ref","isOpen","onClose","onCreate","onUpdate","templates","onDelete","isCreating","setIsCreating","templateName","setTemplateName","selectedType","setSelectedType","templateData","setTemplateData","editingTemplate","setEditingTemplate","useEffect","nodeType","data","handleDataChange","prev","stopPropagation","Bookmark","X","map","charAt","toUpperCase","slice","_Fragment","template","handleEditTemplate","title","Edit3","handleCancelCreation","handleSaveTemplate","alert","templatePayload","undefined","disabled","Save","handleStartCreating","Plus","editor","ToolbarButton","isActive","icon","Icon","chain","focus","toggleBold","run","Bold","toggleItalic","Italic","toggleBulletList","List","isInitialized","setIsInitialized","useEditor","extensions","StarterKit","html","getHTML","editorProps","attributes","class","style","currentContent","newContent","commands","setContent","Toolbar","EditorContent","minHeight"],"sourceRoot":""}