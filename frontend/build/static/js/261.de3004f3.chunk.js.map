{"version":3,"file":"static/js/261.de3004f3.chunk.js","mappings":"yMAGA,MA6CA,EA7CgBA,IAAiB,IAAhB,OAAEC,GAAQD,EACzB,IAAKC,EACH,OAAO,KAGT,MAAMC,EAAgBC,IAAA,IAAC,QAAEC,EAAO,SAAEC,EAAUC,KAAMC,EAAI,MAAEC,GAAOL,EAAA,OAC7DM,EAAAA,EAAAA,KAAA,UACEL,QAASA,EACTM,UAAW,sEACTL,EACI,mDACA,iFAENG,MAAOA,EACPG,KAAK,SAAQC,UAEbH,EAAAA,EAAAA,KAACF,EAAI,CAACM,KAAM,QAIhB,OACEC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,gFAA+EE,SAAA,EAC5FH,EAAAA,EAAAA,KAACP,EAAa,CACZE,QAASA,IAAMH,EAAOc,QAAQC,QAAQC,aAAaC,MACnDb,SAAUJ,EAAOI,SAAS,QAC1BC,KAAMa,EAAAA,EACNX,MAAM,UAERC,EAAAA,EAAAA,KAACP,EAAa,CACZE,QAASA,IAAMH,EAAOc,QAAQC,QAAQI,eAAeF,MACrDb,SAAUJ,EAAOI,SAAS,UAC1BC,KAAMe,EAAAA,EACNb,MAAM,YAERC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,+BACfD,EAAAA,EAAAA,KAACP,EAAa,CACZE,QAASA,IAAMH,EAAOc,QAAQC,QAAQM,mBAAmBJ,MACzDb,SAAUJ,EAAOI,SAAS,cAC1BC,KAAMiB,EAAAA,EACNf,MAAM,oBCiBd,EAtDuBR,IAAmD,IAAlD,QAAEwB,EAAO,SAAEC,EAAQ,YAAEC,EAAW,KAAEC,EAAO,GAAG3B,EAClE,MAAO4B,EAAeC,IAAoBC,EAAAA,EAAAA,WAAS,GAE7C7B,GAAS8B,EAAAA,EAAAA,IAAU,CACvBC,WAAY,CAACC,EAAAA,GACbT,QAAS,GACTU,SAAU/B,IAAiB,IAAhB,OAAEF,GAAQE,EACnB,MAAMgC,EAAOlC,EAAOmC,UACpBX,EAASU,IAEXE,YAAa,CACXC,WAAY,CACVC,MAAO,qJACPC,MAAO,eAAsB,IAAPb,UAG1Bc,SAAUA,KACRZ,GAAiB,MAiBrB,OAZAa,EAAAA,EAAAA,WAAU,KACR,GAAIzC,GAAU2B,EAAe,CAC3B,MAAMe,EAAiB1C,EAAOmC,UACxBQ,EAAapB,GAAW,UAG1BmB,IAAmBC,GACrB3C,EAAO4C,SAASC,WAAWF,GAAY,EAE3C,GACC,CAACpB,EAASvB,EAAQ2B,IAEhB3B,GASHa,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,mBAAkBE,SAAA,EAC/BH,EAAAA,EAAAA,KAACsC,EAAO,CAAC9C,OAAQA,KACjBQ,EAAAA,EAAAA,KAACuC,EAAAA,GAAa,CACZ/C,OAAQA,EACRS,UAAU,UACVgB,YAAaA,QAZfjB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wEAAwE8B,MAAO,CAACS,UAAqB,IAAPtB,EAAH,OAAoBf,UAC5HH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBE,SAAC,wB","sources":["components/Toolbar.js","components/RichTextEditor.js"],"sourcesContent":["import React from 'react';\nimport { Bold, Italic, List } from 'lucide-react';\n\nconst Toolbar = ({ editor }) => {\n  if (!editor) {\n    return null;\n  }\n\n  const ToolbarButton = ({ onClick, isActive, icon: Icon, title }) => (\n    <button\n      onClick={onClick}\n      className={`p-2 rounded-md border transition-all duration-200 hover:shadow-md ${\n        isActive\n          ? 'bg-blue-600 text-white border-blue-600 shadow-md'\n          : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50 hover:border-gray-400'\n      }`}\n      title={title}\n      type=\"button\"\n    >\n      <Icon size={16} />\n    </button>\n  );\n\n  return (\n    <div className=\"flex items-center gap-2 p-2 bg-gray-50 border border-gray-200 rounded-lg mb-3\">\n      <ToolbarButton\n        onClick={() => editor.chain().focus().toggleBold().run()}\n        isActive={editor.isActive('bold')}\n        icon={Bold}\n        title=\"Bold\"\n      />\n      <ToolbarButton\n        onClick={() => editor.chain().focus().toggleItalic().run()}\n        isActive={editor.isActive('italic')}\n        icon={Italic}\n        title=\"Italic\"\n      />\n      <div className=\"w-px h-6 bg-gray-300 mx-1\" />\n      <ToolbarButton\n        onClick={() => editor.chain().focus().toggleBulletList().run()}\n        isActive={editor.isActive('bulletList')}\n        icon={List}\n        title=\"Bullet List\"\n      />\n    </div>\n  );\n};\n\nexport default Toolbar;","import React, { useEffect, useState } from 'react';\nimport { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Toolbar from './Toolbar';\n\nconst RichTextEditor = ({ content, onChange, placeholder, rows = 3 }) => {\n  const [isInitialized, setIsInitialized] = useState(false);\n  \n  const editor = useEditor({\n    extensions: [StarterKit],\n    content: '',\n    onUpdate: ({ editor }) => {\n      const html = editor.getHTML();\n      onChange(html);\n    },\n    editorProps: {\n      attributes: {\n        class: `w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors prose prose-sm max-w-none`,\n        style: `min-height: ${rows * 1.5}rem;`,\n      },\n    },\n    onCreate: () => {\n      setIsInitialized(true);\n    },\n  });\n\n  // Safely update editor content when content prop changes\n  useEffect(() => {\n    if (editor && isInitialized) {\n      const currentContent = editor.getHTML();\n      const newContent = content || '<p></p>';\n      \n      // Only update if content actually changed and avoid loops\n      if (currentContent !== newContent) {\n        editor.commands.setContent(newContent, false);\n      }\n    }\n  }, [content, editor, isInitialized]);\n\n  if (!editor) {\n    return (\n      <div className=\"w-full p-3 border border-gray-300 rounded-lg bg-gray-50 animate-pulse\" style={{minHeight: `${rows * 1.5}rem`}}>\n        <div className=\"text-gray-400 text-sm\">Loading editor...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"rich-text-editor\">\n      <Toolbar editor={editor} />\n      <EditorContent\n        editor={editor}\n        className=\"min-h-0\"\n        placeholder={placeholder}\n      />\n    </div>\n  );\n};\n\nexport default RichTextEditor;"],"names":["_ref","editor","ToolbarButton","_ref2","onClick","isActive","icon","Icon","title","_jsx","className","type","children","size","_jsxs","chain","focus","toggleBold","run","Bold","toggleItalic","Italic","toggleBulletList","List","content","onChange","placeholder","rows","isInitialized","setIsInitialized","useState","useEditor","extensions","StarterKit","onUpdate","html","getHTML","editorProps","attributes","class","style","onCreate","useEffect","currentContent","newContent","commands","setContent","Toolbar","EditorContent","minHeight"],"sourceRoot":""}